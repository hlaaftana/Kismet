defn binary_search[T](a: List[T], k: T, returns i: Int32) {
  i: 0i32
  b: size a
  while [< i b] {
    mid: int32 [half [+ i b]]
    if [< a[mid] k] (i: next mid) (b: mid)
  }
  unless [and [< i a.size] [is? a[i] k]] i: -1i32
}

;; type of binary_search is
;; GenericFunction[Tuple[List[Any], Any], Int32] <:
;; Function[Tuple[List[Any], Any], Int32]
;; type of binary_search[String] is
;; Function[Tuple[List[String], String], Int32]

assert_is 3 [binary_search [1, 2, 3, 4, 5, 6] 4]
assert_is -1 [binary_search [3, 5, 1, 4, 1] 1]
assert_is 1 [binary_search ["a", "b", "c"] "b"]
