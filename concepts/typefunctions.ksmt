;; alternative im considering to generics, every function can
;; have its own bounds and then receive the actual type of the arguments
;; and return type bound then operate on them

defn [memoized (when F: parameter_type Function) (f: F) (returns F)] {
  cache: cast Map[arguments F, result F] {:}
  fn [args: varargs (arguments F)] {
    get_or_set cache[args] [call f args]
  }
}