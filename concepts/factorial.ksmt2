block functional {
  def permutation(n, r) is Int, Int = product n - r + 1 .. n
  def factorial(n) is Int = permutation n n
  def combination(n, r) is Int, Int = div (permutation n r) (factorial r)
}

block imperative {
  def factorial(n) is Int {
    x = i = 1
    while i < n {
      x *= (i += 1)
    }
    x
  }

  def permutation(n, r) is Int, Int {
    x = 1
    i = next n - r
    while i < n {
      x |>= * (i |>= + 1)
    }
    x
  }

  def combination(n, r) is Int, Int
    for result x = 1, each i in 0..<r in while i < r {
      x = x * (n - i) / (r - i)
    }
}

assert_is (functional.factorial 5) (imperative.factorial 5) 120
assert_is functional.permutation(4, 2) (imperative.permutation 4 2) 12
assert_is (functional.combination 6 3) (imperative.combination 6 3) 20