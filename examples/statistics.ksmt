defn [mean (l: List[Number]) (returns Number)] [/ [sum l] l.size]

defn [median (l: List[Number]) (returns Number)] {
  d: int32 [half l.size]
  if [odd? l.size] l[d] [half [+ l[d] l[prev d]]]
}

defn [standard_deviation (l: List[Number]) (returns Number)] {
  a: let (result s: 0, m: mean l, each a: l) {
    incr s [squared [- a m]]
  }
  square_root [/ a [prev l.size]]
}

defn [skewness l: List[Number]] [
  / [* [- [mean l] [median l]] 3] [standard_deviation l]]

assert_is 5 [median [1, 2, 3, 4, 5, 6, 7, 8, 9]] [mean [1, 2, 3, 4, 5, 6, 7, 8, 9]]
