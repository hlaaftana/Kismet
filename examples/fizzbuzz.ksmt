defn [fizzbuzz_imperative (n: Int)] {
    let (result x: "", each it: range 1 n) {
        if (d3: divs? it 3) (add x "Fizz")
        if (d5: divs? it 5) (add x "Buzz")
        unless (or d3 d5) (add x (string it))
        if (isn't? it n) (add x "\n")
    }
}

defn [fizzbuzz_functional (n: Int)] {
  |> [collect [range 1 n] [fn i
    [or? [divs? i 15] "FizzBuzz"
      [or? [divs? i 3] "Fizz"
        [or? [divs? i 5] "Buzz"
          [string i]]]]]] [join "\n"]
}

assert_is fizzbuzz_functional(100) fizzbuzz_imperative(100)