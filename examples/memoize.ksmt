defn [memoized f] {
  cache: cast Map[Tuple, Any] {#}
  fn {
    get_or_set cache[_all] [call f _all]
  }
}

;;defn_generic memoized[F: Function](f: F) {
;;  cache: new_map[F[0], F[1]]()
;;  defn newfun(spread F[0]) [get_or_set cache _all [call f _all]]
;;  newfun
;;}

static our_memoize: tmpl {
  fun: cast Expression exprs[0]
  call_expr [name_expr "set_to", fun, call_expr [name_expr "memoized", fun]]
}

defn [nth_fibonacci (n: Int) (returns Int)] {
  or? [< n 2] 1 [sum [collect [decr n, decr n] nth_fibonacci]]
}

our_memoize nth_fibonacci

assert_is 165580141 [nth_fibonacci 40]