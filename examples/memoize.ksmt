defn [memoized f] {
  cache: {#}
  fn [get_or_set cache _all [call f _all]]
}

;;defn_generic memoized[F: Function](f: F) {
;;  cache: new_map[F[0], F[1]]()
;;  defn newfun(spread F[0]) [get_or_set cache _all [call f _all]]
;;  newfun
;;}

static memoize: tmpl {
  call_expr [static_expr set_to] $0 [call_expr [name_expr "memoized"] $0]
}

defn [nth_fibonacci n] [check n
  zero 1
  one 1
  [sum [collect [range [decr n] [decr n]] nth_fibonacci]]]

memoize nth_fibonacci

assert_is [nth_fibonacci 40] 165580141