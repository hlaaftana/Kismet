%"default_int_bits 32"

dive { ;; functional
  defn [permutation (n: Int32) (r: Int32) (returns Int32)] [product [range [next [- n r]] n]]
  defn [factorial (n: Int32) (returns Int32)] [permutation n n]
  defn [combination (n: Int32) (r: Int32) (returns Int32)] [div [permutation n r] [factorial r]]

  assert_is [factorial 5] 120
  assert_is [permutation 4 2] 12
  assert_is [combination 6 3] 20
}

dive { ;; imperative
  defn [factorial (n: Int32)] {
    x: i: 1
    while [<= i n] {
      x: * x i
      incr i
    }
    x
  }

  defn [permutation (n: Int32) (r: Int32)] {
    x: 1
    i: + [- n r] 1
    while [<= i n] {
      |>= x [* i]
      incr i
    }
    x
  }

  defn [combination (n: Int32) (r: Int32)] {
    let (result x: 1, i: 0) {
      while [< i r] {
        x: / [* x [- n i]] [- r i]
        incr i
      }
    }
  }

  assert_is [factorial 5] 120
  assert_is [permutation 4 2] 12
  assert_is [combination 6 3] 20
}

defn [combination (n: Int32) (r: Int32)] {
  let (result x: 1, each i: range< 0 r) {
    x: / [* x [- n i]] [- r i]
  }
}

assert_is [combination 6 3] 20

%"!default_int_bits"